am5.ready(function () {
    let line_chart = $("#line_chart"),
        data = line_chart.data("chat-data") ?? [],
        name = line_chart.data("name") ?? "Line Chart";
    var root = am5.Root.new("line_chart");
    root.setThemes([am5themes_Animated.new(root)]);
    var chart = root.container.children.push(
        am5xy.XYChart.new(root, {
            panX: !0,
            panY: !0,
            wheelX: "panX",
            wheelY: "zoomX",
            pinchZoomX: !0,
            paddingLeft: 0,
            paddingRight: 1,
        }),
    );
    chart.set("cursor", am5xy.XYCursor.new(root, {})).lineY.set("visible", !1);
    var xRenderer = am5xy.AxisRendererX.new(root, {
        minGridDistance: 30,
        minorGridEnabled: !0,
    });
    xRenderer.labels.template.setAll({
        centerY: am5.p50,
        centerX: am5.p100,
        paddingRight: 15,
    }),
        xRenderer.grid.template.setAll({ location: 1 });
    var xAxis = chart.xAxes.push(
            am5xy.CategoryAxis.new(root, {
                maxDeviation: 0.3,
                categoryField: "label",
                renderer: xRenderer,
                tooltip: am5.Tooltip.new(root, {}),
            }),
        ),
        yRenderer = am5xy.AxisRendererY.new(root, { strokeOpacity: 0.1 }),
        yAxis = chart.yAxes.push(
            am5xy.ValueAxis.new(root, {
                maxDeviation: 0.2,
                renderer: yRenderer,
            }),
        ),
        series = chart.series.push(
            am5xy.ColumnSeries.new(root, {
                name: name,
                xAxis: xAxis,
                yAxis: yAxis,
                valueYField: "value",
                sequencedInterpolation: !0,
                categoryXField: "label",
                tooltip: am5.Tooltip.new(root, { labelText: "{valueY}" }),
            }),
        );
    series.columns.template.adapters.add("fill", function (fill, target) {
        return target.dataItem.get("valueY") % 2 == 0
            ? am5.color(2201171)
            : am5.color(15527926);
    }),
        series.columns.template.adapters.add(
            "stroke",
            function (stroke, target) {
                return chart
                    .get("colors")
                    .getIndex(series.columns.indexOf(target));
            },
        ),
        series.columns.template.setAll({
            cornerRadiusTL: 5,
            cornerRadiusTR: 5,
            strokeOpacity: 0,
        }),
        xAxis.data.setAll(data),
        series.data.setAll(data),
        series.appear(1e3),
        chart.appear(1e3, 100);
}),
    am5.ready(function () {
        let el = $("#doughnut_chart"),
            data = el.data("chat-data") ?? [],
            name = el.data("name") ?? "Doughnut Chart";
        if (data.every((item) => 0 === item.value))
            el.html("<p class='text-center text-muted my-5'>No Data Found</p>");
        else {
            var root = am5.Root.new("doughnut_chart");
            root.setThemes([am5themes_Animated.new(root)]);
            var chart = root.container.children.push(
                    am5percent.PieChart.new(root, {
                        layout: root.verticalLayout,
                        innerRadius: am5.percent(65),
                    }),
                ),
                series = chart.series.push(
                    am5percent.PieSeries.new(root, {
                        name: name,
                        valueField: "value",
                        categoryField: "category",
                        alignLabels: !1,
                    }),
                );
            series
                .get("colors")
                .set("colors", [
                    am5.color(2201171),
                    am5.color(15329769),
                    am5.color(7042680),
                    am5.color(15780236),
                ]),
                series.data.setAll(data),
                chart.children
                    .push(
                        am5.Legend.new(root, {
                            centerX: am5.percent(50),
                            x: am5.percent(50),
                            marginTop: 30,
                            marginBottom: 30,
                        }),
                    )
                    .data.setAll(series.dataItems),
                series.labels.template.set("visible", !1),
                series.ticks.template.set("visible", !1),
                series.appear(1e3, 100);
        }
    }),
    am5.ready(function () {
        let el = $("#venn_diagram"),
            data = el.data("chat-data") ?? [],
            name = el.data("name") ?? "Doughnut Chart";
        if (
            ((data = Object.keys(data).map((key) => data[key])),
            data.every((item) => 0 === item.value))
        )
            el.html("<p class='text-center text-muted my-5'>No Data Found</p>");
        else {
            var root = am5.Root.new("venn_diagram");
            root.setThemes([am5themes_Animated.new(root)]);
            var container = root.container.children.push(
                    am5.Container.new(root, {
                        name: name,
                        width: am5.p100,
                        height: am5.p100,
                        layout: root.verticalLayout,
                    }),
                ),
                chart = container.children.push(
                    am5venn.Venn.new(root, {
                        categoryField: "name",
                        valueField: "value",
                        intersectionsField: "sets",
                        fillField: "color",
                        paddingTop: 40,
                        paddingBottom: 40,
                        paddingLeft: 40,
                        paddingRight: 40,
                    }),
                );
            chart.data.setAll(data),
                chart.slices.template.set("tooltipText", "{category}: {value}"),
                chart.hoverGraphics.setAll({
                    strokeDasharray: [3, 3],
                    stroke: am5.color("#000"),
                    strokeWidth: 2,
                }),
                container.children
                    .push(
                        am5.Legend.new(root, { centerX: am5.p50, x: am5.p50 }),
                    )
                    .data.setAll(chart.dataItems);
        }
    }),
    am5.ready(function () {
        let el = $("#multi_axis_line"),
            data = el.data("chat-data") ?? [],
            name = el.data("name") ?? "Multi Line Chart";
        var root = am5.Root.new("multi_axis_line");
        root.setThemes([am5themes_Animated.new(root)]);
        var chart = root.container.children.push(
                am5xy.XYChart.new(root, {
                    name: name,
                    panX: !0,
                    panY: !0,
                    layout: root.verticalLayout,
                }),
            ),
            yAxis = chart.yAxes.push(
                am5xy.ValueAxis.new(root, {
                    extraTooltipPrecision: 1,
                    renderer: am5xy.AxisRendererY.new(root, {}),
                }),
            ),
            xAxis = chart.xAxes.push(
                am5xy.DateAxis.new(root, {
                    baseInterval: { timeUnit: "month", count: 1 },
                    renderer: am5xy.AxisRendererX.new(root, {
                        minGridDistance: 20,
                    }),
                }),
            );
        function createSeries(name, field) {
            var series = chart.series.push(
                am5xy.SmoothedXLineSeries.new(root, {
                    name: name,
                    xAxis: xAxis,
                    yAxis: yAxis,
                    valueYField: field,
                    valueXField: "date",
                    tooltip: am5.Tooltip.new(root, {
                        pointerOrientation: "horizontal",
                        labelText: "[bold]{name}[/]\n{categoryX}: {valueY}",
                    }),
                }),
            );
            series.strokes.template.setAll({
                strokeWidth: 2,
                shadowColor: am5.color(0),
                shadowBlur: 10,
                shadowOffsetX: 10,
                shadowOffsetY: 10,
                shadowOpacity: 0.5,
            }),
                series.bullets.push(function () {
                    return am5.Bullet.new(root, {
                        sprite: am5.Circle.new(root, {
                            radius: 5,
                            fill: series.get("fill"),
                            shadowColor: am5.color(0),
                            shadowBlur: 10,
                            shadowOffsetX: 10,
                            shadowOffsetY: 10,
                            shadowOpacity: 0.3,
                        }),
                    });
                }),
                series.data.setAll(data);
        }
        chart.get("colors").set("colors", [am5.color(1673044), am5.color(0)]),
            createSeries("Approved", "approved"),
            createSeries("Pending", "pending"),
            chart.set(
                "cursor",
                am5xy.XYCursor.new(root, { behavior: "zoomXY", xAxis: xAxis }),
            ),
            xAxis.set(
                "tooltip",
                am5.Tooltip.new(root, { themeTags: ["axis"] }),
            ),
            yAxis.set(
                "tooltip",
                am5.Tooltip.new(root, { themeTags: ["axis"] }),
            );
    });
